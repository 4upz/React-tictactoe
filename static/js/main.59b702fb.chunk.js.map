{"version":3,"sources":["components/square.jsx","components/board.jsx","index.js"],"names":["Square","props","className","isWinningSquare","variant","onClick","value","Board","index","winningRow","this","key","squares","includes","boardSize","board","i","squareRow","j","push","renderSquare","renderBoard","Component","Game","state","history","Array","fill","moveRow","moveCol","stepNumber","xIsNext","hasDescendingHistory","slice","length","calculatedWinner","winner","setState","concat","Math","floor","step","status","current","gameProgress","moves","map","move","desc","Button","size","color","jumpTo","reverse","Container","maxwidth","style","position","maxWidth","handleClick","IconButton","arialabel","sortHistory","fontSize","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0PAGe,SAASA,EAAOC,GAE7B,IAAMC,EAAS,iBAAaD,EAAME,gBAAkB,iBAAmB,IACvE,OACE,4BAAQC,QAAQ,YAAYF,UAAWA,EAAWG,QAASJ,EAAMI,SAC9DJ,EAAMK,O,ICJQC,E,2KACNC,GAAQ,IAAD,OACZC,EAAaC,KAAKT,MAAMQ,WAC9B,OACE,kBAACT,EAAD,CACEW,IAAKH,EACLF,MAAOI,KAAKT,MAAMW,QAAQJ,GAE1BH,QAAS,kBAAM,EAAKJ,MAAMI,QAAQG,IAElCL,gBAAiBM,GAAcA,EAAWI,SAASL,O,kCAM7CM,GAEV,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAElC,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAIJ,EAAWI,IAC7BD,EAAUE,KAAKT,KAAKU,aAAa,EAAIJ,EAAIE,IAE3CH,EAAMI,KACJ,yBAAKR,IAAKK,EAAGd,UAAU,aACpBe,IAIP,OAAOF,I,+BAMP,OAAO,yBAAKb,UAAU,SAASQ,KAAKW,YADlB,Q,GAlCaC,a,0DCU7BC,E,kDACF,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDuB,MAAQ,CACTC,QAAS,CACL,CACIb,QAASc,MAAM,GAAGC,KAAK,MACvBC,QAAS,KACTC,QAAS,OAGjBC,WAAY,EACZC,SAAS,EACTC,sBAAsB,GAZX,E,wDAgBPxB,GACR,IAAMiB,EAAUf,KAAKc,MAAMC,QAAQQ,MAAM,EAAGvB,KAAKc,MAAMM,WAAa,GAE9DlB,EADUa,EAAQA,EAAQS,OAAS,GACjBtB,QAAQqB,QAE5BE,EAAiBvB,GAASwB,QAAUxB,EAAQJ,KAGhDI,EAAQJ,GAASE,KAAKc,MAAMO,QAAU,IAAM,IAC5CrB,KAAK2B,SAAS,CACVZ,QAASA,EAAQa,OAAO,CACpB,CACI1B,QAASA,EAETiB,QAAUrB,EAAQ,EAAK,EACvBoB,QAASW,KAAKC,MAAMhC,EAAQ,GAAK,KAGzCsB,WAAYL,EAAQS,OACpBH,SAAUrB,KAAKc,MAAMO,a,6BAItBU,GACH/B,KAAK2B,SAAS,CACVP,WAAYW,EACZV,QAASU,EAAO,IAAM,M,oCAM1B/B,KAAK2B,SAAS,CACVL,sBAAuBtB,KAAKc,MAAMQ,yB,+BAIhC,IAmCFU,EAnCC,OACCjB,EAAUf,KAAKc,MAAMC,QACrBkB,EAAUlB,EAAQf,KAAKc,MAAMM,YAE7Bc,EAAeT,EAAiBQ,EAAQ/B,SACxCwB,EAASQ,EAAaR,OACtB3B,EAAamC,EAAanC,WAE1BoC,EAAQpB,EAAQqB,KAAI,SAACL,EAAMM,GAE7B,IAAMC,EAAOD,EAAI,uBACKA,EADL,mBACoBN,EAAKZ,QADzB,iBACyCY,EAAKb,QAD9C,wBAIjB,OACI,wBAAIjB,IAAKoC,GACL,kBAACE,EAAA,EAAD,CACI7C,QAAQ,YACR8C,KAAK,QACLC,MACIJ,IAAS,EAAKvB,MAAMM,WACd,UACA,UAEVzB,QAAS,kBAAM,EAAK+C,OAAOL,KAE1BC,OAmBjB,OAZItC,KAAKc,MAAMQ,sBAAsBa,EAAMQ,UAIvCX,EADAN,EACM,UAAMA,EAAN,mBACC1B,KAAKc,MAAMM,YAAca,EAAQ/B,QAAQsB,OAEvC,qBAEH,uBAAmBxB,KAAKc,MAAMO,QAAU,IAAM,KAIpD,kBAACuB,EAAA,EAAD,CACIC,SAAS,KACTrD,UAAU,OACVsD,MAAO,CACHC,SAAU,aAGd,yBAAKvD,UAAU,cACX,4CAEJ,kBAACoD,EAAA,EAAD,CAAWI,SAAS,KAAKxD,UAAU,cAC/B,kBAAC,EAAD,CACIU,QAAS+B,EAAQ/B,QACjBP,QAAS,SAACG,GAAD,OAAW,EAAKmD,YAAYnD,IACrCC,WAAYA,KAGpB,kBAAC6C,EAAA,EAAD,CAAWpD,UAAU,aACjB,6BACKwC,EAAQ,IACT,8BACI,kBAACkB,EAAA,EAAD,CACI1D,UAAU,YACV2D,UAAU,OACVX,KAAK,QACL7C,QAAS,kBAAM,EAAKyD,gBAEnBpD,KAAKc,MAAMQ,qBACR,kBAAC,IAAD,CAAiB+B,SAAS,YAE1B,kBAAC,IAAD,CAAmBA,SAAS,eAM5C,wBAAI7D,UAAU,aAAa2C,S,GAxI5BvB,aAoJnB,SAASa,EAAiBvB,GAWtB,IAVA,IAAMoD,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFhD,EAAI,EAAGA,EAAIgD,EAAM9B,OAAQlB,IAAK,CAAC,IAAD,cACjBgD,EAAMhD,GADW,GAC5BiD,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GACIvD,EAAQqD,IACRrD,EAAQqD,KAAOrD,EAAQsD,IACvBtD,EAAQqD,KAAOrD,EAAQuD,GAGvB,MAAO,CACH/B,OAAQxB,EAAQqD,GAChBxD,WAAYuD,EAAMhD,IAI9B,MAAO,CACHoB,OAAQ,KACR3B,WAAY,MA9BpB2D,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.59b702fb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// This is considered a function component, for a component that only contains a render method and doesn't need to be a class\r\nexport default function Square(props) {\r\n  /* Solution 5: Append class name if this square is a winning square and should be highlighted */\r\n  const className = `square ${props.isWinningSquare ? \"winning-square\" : \"\"}`;\r\n  return (\r\n    <button variant=\"contained\" className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Square from \"./square\";\r\n\r\n// Controls board rendering\r\nexport default class Board extends Component {\r\n  renderSquare(index) {\r\n    const winningRow = this.props.winningRow;\r\n    return (\r\n      <Square\r\n        key={index}\r\n        value={this.props.squares[index]}\r\n        //Passes the onClick function through the square's prop parameter\r\n        onClick={() => this.props.onClick(index)}\r\n        /* Solution 5: Whether this square is a winning square */\r\n        isWinningSquare={winningRow && winningRow.includes(index)}\r\n      />\r\n    );\r\n  }\r\n\r\n  /* Solution 3: Uses two loops to Render rows of squares for the tic-tac-toe board */\r\n  renderBoard(boardSize) {\r\n    let board = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      let squareRow = [];\r\n      for (let j = 0; j < boardSize; j++) {\r\n        squareRow.push(this.renderSquare(3 * i + j));\r\n      }\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {squareRow}\r\n        </div>\r\n      );\r\n    }\r\n    return board;\r\n  }\r\n\r\n  render() {\r\n    /* Solution 3: Using two loops (in helper method) to make the board squares */\r\n    const boardSize = 3;\r\n    return <div className=\"board\">{this.renderBoard(boardSize)}</div>;\r\n  }\r\n}\r\n","/* React */\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n/* Components & Styling */\r\nimport \"./index.css\";\r\nimport Board from \"./components/board\";\r\n/* Material UI */\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\"; //Uses Material Core as Button reference\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\n// Controls the game functionality and overview\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                    moveRow: null,\r\n                    moveCol: null,\r\n                },\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            hasDescendingHistory: false,\r\n        };\r\n    }\r\n\r\n    handleClick(index) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        // Do nothing if someone has won the game or if the square is already filled\r\n        if (calculatedWinner(squares).winner || squares[index]) {\r\n            return;\r\n        }\r\n        squares[index] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares,\r\n                    /* Solution 1: How to calculate columns and rows for recording move locations */\r\n                    moveCol: (index % 3) + 1,\r\n                    moveRow: Math.floor(index / 3) + 1,\r\n                },\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: step % 2 === 0,\r\n        });\r\n    }\r\n\r\n    /* Solution 4: Helper function for ascending/descending list items after sort button is clicked */\r\n    sortHistory() {\r\n        this.setState({\r\n            hasDescendingHistory: !this.state.hasDescendingHistory,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        /* Solution 5: New variables to account for game progress and results if there is a winner */\r\n        const gameProgress = calculatedWinner(current.squares);\r\n        const winner = gameProgress.winner;\r\n        const winningRow = gameProgress.winningRow;\r\n\r\n        const moves = history.map((step, move) => {\r\n            /* Solution 1: Displaying the move location in the history list */\r\n            const desc = move\r\n                ? `Go to Move # ${move} - (Col ${step.moveCol}, Row ${step.moveRow})`\r\n                : `Go to Game Start`;\r\n            /* Solution 2: Conditional class assignment for bolding currently selected step */\r\n            return (\r\n                <li key={move}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        color={\r\n                            move === this.state.stepNumber\r\n                                ? \"primary\"\r\n                                : \"default\"\r\n                        }\r\n                        onClick={() => this.jumpTo(move)}\r\n                    >\r\n                        {desc}\r\n                    </Button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        /* Solution 4: Display the list of move history based on selected sort method */\r\n        if (this.state.hasDescendingHistory) moves.reverse();\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = `${winner} is the winner!`;\r\n        } else if (this.state.stepNumber >= current.squares.length) {\r\n            /* Solution 6: Extra condition for declaring a tie when the maximum moves are made with no winner */\r\n            status = \"The game is a tie!\";\r\n        } else {\r\n            status = `Next player: ${this.state.xIsNext ? \"X\" : \"O\"}`;\r\n        }\r\n\r\n        return (\r\n            <Container\r\n                maxwidth=\"xl\"\r\n                className=\"game\"\r\n                style={{\r\n                    position: \"absolute\",\r\n                }}\r\n            >\r\n                <div className=\"game-title\">\r\n                    <h1>Tic-Tac-Toe</h1>\r\n                </div>\r\n                <Container maxWidth=\"sm\" className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(index) => this.handleClick(index)}\r\n                        winningRow={winningRow}\r\n                    />\r\n                </Container>\r\n                <Container className=\"game-info\">\r\n                    <div>\r\n                        {status}{\" \"}\r\n                        <span>\r\n                            <IconButton\r\n                                className=\"sort-icon\"\r\n                                arialabel=\"sort\"\r\n                                size=\"small\"\r\n                                onClick={() => this.sortHistory()}\r\n                            >\r\n                                {this.state.hasDescendingHistory ? (\r\n                                    <ArrowUpwardIcon fontSize=\"inherit\" />\r\n                                ) : (\r\n                                    <ArrowDownwardIcon fontSize=\"inherit\" />\r\n                                )}\r\n                            </IconButton>\r\n                        </span>\r\n                    </div>\r\n                    {/* Solution 4: Added sort button with listener.*/}\r\n                    <ol className=\"move-list\">{moves}</ol>\r\n                </Container>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n// Analyzes when the game is won and reveals the tic-tac-toe winner\r\nfunction calculatedWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares[a] === squares[c]\r\n        ) {\r\n            /* Solution 5: New return values that now includes the winning row of squares */\r\n            return {\r\n                winner: squares[a],\r\n                winningRow: lines[i],\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        winner: null,\r\n        winningRow: null,\r\n    };\r\n}\r\n"],"sourceRoot":""}